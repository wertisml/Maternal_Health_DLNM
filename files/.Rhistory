# Cross fold validation for performance estimation
set.seed(24)
perf_folds <- vfold_cv(Train,
v = 5,
repeats = 5)
# Set up recipe for additional data preprocessing
Recipe <- recipe(Mental_Health ~ .,
data = Train) %>%
#ID = c(Zip, Date)) %>%
step_nzv(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors())
# Set spec for Nearest Neighbor Model
gam_spec <- gen_additive_mod(adjust_deg_free = tune(), select_features=TRUE) %>%
set_engine('mgcv') %>%
set_mode('regression')
# Set up workflow
gam_wf <- workflow() %>%
add_model(gam_spec, formula = Mental_Health ~ s(Zip) + s(TAVG) + s(TAGVLag1) +
s(TAGVLag2) + s(TAGVLag3) + s(TAGVLag4) + s(TAGVLag5) + s(TAGVLag6) +
s(RH)) %>%
add_recipe(Recipe)
# Set up parameter grid
set.seed(24)
gam_grid <- grid_max_entropy(extract_parameter_set_dials(gam_spec),
size = 10)
#create and register cluster
my.cluster <- parallel::makeCluster(n.cores)
n.cores <- parallel::detectCores() - 1
#create and register cluster
my.cluster <- parallel::makeCluster(n.cores)
doParallel::registerDoParallel(cl = my.cluster)
# Tune parameters
options(tidymodels.dark = TRUE)
set.seed(24)
gam_tuning <- tune_grid(gam_wf,
tuning_folds,
grid = gam_grid,
metrics = metric_set(yardstick::mae))
parallel::stopCluster(cl = my.cluster)
# Examine results of tuning
autoplot(gam_tuning)
show_best(gam_tuning)
# Create grid around best mae results
gam_grid <- expand.grid(adjust_deg_free = seq(0.3, 0.8, .05))
# Create grid around best mae results
gam_grid <- expand.grid(adjust_deg_free = seq(0.3, 0.8, .05))
#create and register cluster
my.cluster <- parallel::makeCluster(n.cores)
doParallel::registerDoParallel(cl = my.cluster)
# Tune parameters
options(tidymodels.dark = TRUE)
set.seed(24)
gam_tuning <- tune_grid(gam_wf,
tuning_folds,
grid = gam_grid,
metrics = metric_set(yardstick::mae))
# Examine results of tuning
autoplot(gam_tuning)
show_best(gam_tuning)
# Create grid around best mae results
gam_grid <- expand.grid(adjust_deg_free = seq(0.45, 0.55, .01))
#create and register cluster
my.cluster <- parallel::makeCluster(n.cores)
doParallel::registerDoParallel(cl = my.cluster)
# Tune parameters
options(tidymodels.dark = TRUE)
set.seed(24)
gam_tuning <- tune_grid(gam_wf,
tuning_folds,
grid = gam_grid,
metrics = metric_set(yardstick::mae))
parallel::stopCluster(cl = my.cluster)
# Examine results of tuning
autoplot(gam_tuning)
show_best(gam_tuning)
# Check overall resamples performance
gam_insamp_perf <- gam_wf %>%
finalize_workflow(select_best(gam_tuning, "mae")) %>%
fit_resamples(perf_folds)
parallel::stopCluster(cl = my.cluster)
rm(list=ls(name=env), pos=env)
library(foreach)
env <- foreach:::.foreachGlobals
unregister <- function() {
env <- foreach:::.foreachGlobals
rm(list=ls(name=env), pos=env)
}
unregister()
# Check overall resamples performance
gam_insamp_perf <- gam_wf %>%
finalize_workflow(select_best(gam_tuning, "mae")) %>%
fit_resamples(perf_folds)
# Examine results from each fold, looking for outliers
gam_insamp_perf %>%
select(id, .metrics) %>%
unnest(cols = c(.metrics)) %>%
select(id, .metric, .estimate) %>%
pivot_wider(names_from = .metric, values_from =.estimate) %>%
unnest(cols = c(rmse, rsq)) %>%
pull(rmse)
gam_insamp_perf
autoplot(gam_insamp_perf)
# Examine results from each fold, looking for outliers
gam_insamp_perf %>%
select(id, .metrics) %>%
unnest(cols = c(.metrics)) %>%
select(id, .metric, .estimate) %>%
pivot_wider(names_from = .metric, values_from =.estimate) %>%
unnest(cols = c(rmse, rsq)) %>%
pull(rmse)
# Finalize Fit
gam_last <- gam_wf %>%
finalize_workflow(select_best(gam_tuning, "mae")) %>%
last_fit(split)
# Calculate MAE
gam_last %>%
collect_predictions() %>%
yardstick::mae(truth = Mental_Health,
estimate = .pred)
# Calculate RMSE
gam_last %>%
collect_predictions() %>%
yardstick::rmse(truth = Mental_Health,
estimate = .pred)
# View model
test<-gam_last %>%
extract_fit_engine() %>%
tidy() %>%
filter(term != "(Intercept)")
test
summary(test)
# Extract coefficients from GAM
summary(final_tree$fit$fit$fit)
mgcv::plot.gam(final_tree$fit$fit$fit)
summary(final_tree$fit$fit$fit$coefficients)
final_tree <- extract_workflow(gam_last)
# Extract coefficients from GAM
summary(final_tree$fit$fit$fit)
mgcv::plot.gam(final_tree$fit$fit$fit)
glm_fit <- finalize_workflow(gam_wf, gam_last)
glm_fit %>%
fit(data = Train) %>%
pull_workflow_fit() %>%
vip(geom = "point")
gam_fit <- finalize_workflow(gam_wf, gam_last)
gam_fit
gam_last
gam_wf
gam_fit <- finalize_workflow(gam_wf, gam_last)
gam_fit %>%
fit(data = Train) %>%
pull_workflow_fit() %>%
vip(geom = "point")
best_mae <- select_best(gam_tuning, "mae")
show_best(gam_tuning)
best_mae <- select_best(gam_tuning, "mae")
best_mae
final_glm <- finalize_model(gam_spec, best_mae)
final_gam <- finalize_model(gam_spec, best_mae)
gam_fit <- finalize_workflow(gam_wf, final_gam)
gam_fit %>%
fit(data = Train) %>%
pull_workflow_fit() %>%
vip(geom = "point")
final_gam %>%
set_engine("mgcv", importance = "permutation") %>%
fit(Mental_Health ~ ., data = juice(Recipe)) %>%
vip(geom = "point")
final_gam %>%
set_engine("mgcv", importance = "permutation") %>%
fit(Mental_Health ~ ., data = juice(prep(Recipe))) %>%
vip(geom = "point")
juice(prep(Recipe))
gam_wf2 <- workflow() %>%
add_recipe(Recipe)
gam_fit <- finalize_workflow(gam_wf2, final_gam)
gam_wf2 <- workflow(Recipe, gam_spec)
gam_fit <- finalize_workflow(gam_wf2, final_gam)
gam_fit %>%
fit(data = Train) %>%
pull_workflow_fit() %>%
vip(geom = "point")
gam_fit
final_gam %>%
set_engine("mgcv", importance = "permutation") %>%
fit(Mental_Health ~ ., data = Train) %>%
vip(geom = "point")
gam_fit <- finalize_workflow(gam_wf2, final_gam)
gam_fit
gam_fit %>%
fit(data = Train)
gam_fit %>%
fit(data = Recipe) %>%
pull_workflow_fit() %>%
vip(geom = "point")
gam_fit %>%
fit(data = Train) %>%
pull_workflow_fit() %>%
vip(geom = "point")
rlang::last_error()
test<-gam_last %>%
extract_fit_engine() %>%
tidy() %>%
filter(term != "(Intercept)")
final_tree <- extract_workflow(gam_last)
# Extract coefficients from GAM
summary(final_tree$fit$fit$fit)
mgcv::plot.gam(final_tree$fit$fit$fit)
summary(final_tree$fit$fit$fit$coefficients)
library(caret)
# Finalize Fit
gam_last <- gam_wf %>%
finalize_workflow(select_best(gam_tuning, "mae")) %>%
last_fit(split)
gam_last
plot(varImp(gam_last, scale = FALSE), top = 20)
gam_wf2 <- workflow(Recipe, gam_spec)
gam_fit <- finalize_workflow(gam_wf2, final_gam)
gam_fit %>%
fit(data = Train) %>%
pull_workflow_fit() %>%
vip(geom = "point")
# Set up workflow
gam_wf <- workflow() %>%
add_model(gam_spec, formula = Mental_Health ~ s(Zip) + s(TAVG) + s(TAGVLag1) +
s(TAGVLag2) + s(TAGVLag3) + s(TAGVLag4) + s(TAGVLag5) + s(TAGVLag6) +
s(RH)) %>%
add_recipe(Recipe)
gam_wf
gam_fit <- finalize_workflow(gam_wf, final_gam)
gam_fit %>%
fit(data = Train) %>%
pull_workflow_fit() %>%
vip(geom = "point")
gam_fit %>%
fit(data = Train)
str(Data)
?recipe
?step_nzv
library(tidymodels)
library(vip)
library(data.table)
library(dplyr)
library(ggpubr)
Data <- fread("C:\\Users\\owner\\Documents\\Thesis_Documents\\Sheps_temp.csv")
n.cores <- parallel::detectCores() - 1
unregister <- function() {
env <- foreach:::.foreachGlobals
rm(list=ls(name=env), pos=env)
}
library(tidymodels)
library(vip)
library(data.table)
library(dplyr)
library(ggpubr)
Data <- fread("C:\\Users\\owner\\Documents\\Thesis_Documents\\Sheps_temp.csv")
n.cores <- parallel::detectCores() - 1
unregister <- function() {
env <- foreach:::.foreachGlobals
rm(list=ls(name=env), pos=env)
}
library(tidymodels)
library(vip)
library(data.table)
library(dplyr)
library(ggpubr)
Data <- fread("C:\\Users\\owner\\Documents\\Thesis_Documents\\Sheps_temp.csv")
n.cores <- parallel::detectCores() - 1
unregister <- function() {
env <- foreach:::.foreachGlobals
rm(list=ls(name=env), pos=env)
}
library(tidyverse)
library(arrow)
setwd("~/Maternal_Mental_Health/files/Create_Data/Pre_Datasets")
open_dataset("Temperature_Data.parquet")
open_dataset("Temperature_Data.parquet") %>% select(Date) %>% collect()
temp <- open_dataset("Temperature_Data.parquet") %>% select(Date) %>% collect()
summary(temp)
preg <- open_dataset("Pregnancy_data.parquet") %>% select(admitdt) %>% collect()
summary(preg)
library(tidyverse)
library(arrow)
setwd("~/Maternal_Mental_Health/files/Create_Data/Pre_Datasets")
Regions <- read_csv("Regions.csv")
#==============================================================================#
# Create Regions
#==============================================================================#
# Mountains
Mountains <- Regions %>%
filter(Region == "Mountains") %>%
dplyr::select(ZCTA)
# Piedmont
Piedmont <- Regions %>%
filter(Region == "Piedmont") %>%
dplyr::select(ZCTA)
# Coast
Coast <- Regions %>%
filter(Region == "Coast") %>%
dplyr::select(ZCTA)
Temp_and_Preg_with_Regions <- left_join(open_dataset("Temperature_Data.parquet") %>%
select(Zip, Date, TAVG, TMAX, TMIN, RH),
open_dataset("Pregnancy_data.parquet") %>%
rename(Date = admitdt,
Zip = ptzip) %>%
group_by(Zip, Date) %>%
summarise(any_outcome = sum(any_outcome),
pregnant = sum(pregnant),
ab_pregnant = sum(ab_pregnant),
spon_abort = sum(spon_abort),
elect_abort = sum(elect_abort),
delivery = sum(delivery),
preg_comp = sum(preg_comp),
livebirth = sum(livebirth),
some_livebirth = sum(some_livebirth),
stillbirth = sum(stillbirth),
other_birth = sum(other_birth),
gestation = sum(gestation),
postpartum = sum(postpartum),
Depression_new = sum(Depression_new),
Depression = sum(Depression),
Anxiety_new = sum(Anxiety_new),
Anxiety = sum(Anxiety),
Bipolar = sum(Bipolar),
Psych_Dis = sum(Psych_Dis),
Other_MMH_t1 = sum(Other_MMH_t1),
Other_MMH_t2 = sum(Other_MMH_t2),
Other_MMH_t3 = sum(Other_MMH_t3),
Other_MMH_t4 = sum(Other_MMH_t4),
Mental_disorders = sum(Mental_disorders),
suicide_thought = sum(suicide_thought),
suicide_attempt = sum(suicide_attempt),
PMAD = sum(PMAD),
SMI = sum(SMI),
MDP = sum(MDP),
PMAD_primary = sum(PMAD_primary),
SMI_primary = sum(SMI_primary),
MDP_primary = sum(MDP_primary),
suicide_thought_primary = sum(suicide_thought_primary),
suicide_attempt_primary = sum(suicide_attempt_primary),
drug_therapy = sum(drug_therapy),
sleep_disturb = sum(sleep_disturb)),
by = c("Zip", "Date")) %>%
collect() %>%
filter(Date >= "2015-08-26") %>%
replace(is.na(.), 0) %>%
mutate(region = ifelse(Zip %in% Mountains$ZCTA, "Mountains",
ifelse(Zip %in% Piedmont$ZCTA, "Piedmont",
ifelse(Zip %in% Coast$ZCTA, "Coast", ""))))
summary(Temp_and_Preg_with_Regions)
first <- Temp_and_Preg_with_Regions %>% filter(Zip == 27006)
View(first)
first <- Temp_and_Preg_with_Regions %>% filter(Zip == 27007)
first <- Temp_and_Preg_with_Regions %>% filter(Zip == 27008)
first <- Temp_and_Preg_with_Regions %>% filter(Zip == 27009)
first <- Temp_and_Preg_with_Regions %>% filter(Zip == 27010)
first <- Temp_and_Preg_with_Regions %>% filter(Zip == 27011)
2288*804
setwd("~/Maternal_Mental_Health/files")
setwd("~/Maternal_Mental_Health/files")
write_parquet(Temp_and_Preg_with_Regions, "Preg_Temp_Regions.parquet")
library(arrow)
library(tidyverse)
library(dlnm)
library(mixmeta)
library(tsModel)
library(splines)
library(lubridate)
library(gnm)
library(scales)
library(data.table)
library(arrow)
library(tidyverse)
library(dlnm)
library(mixmeta)
library(tsModel)
library(splines)
library(lubridate)
library(gnm)
library(scales)
library(data.table)
setwd("~/Maternal_Mental_Health/files")
filter_data <- function(Sex = NULL, age = NULL, Race = NULL, region = NULL, outcome_column = NULL) {
# Generate file name based on input
file_name <- paste0("Preg_Temp_Regions",
if (!is.null(Sex)) paste0("_Sex") else "",
if (!is.null(age)) paste0("_Age") else "",
if (!is.null(Race)) paste0("_Race") else "", ".parquet")
filtered_data <- open_dataset(file_name) %>%
mutate(month = month(Date)) %>%
filter(Zip != 28668, Zip != 28652, Zip != 28629, Zip != 28672, Zip != 28720,
Zip != 28733, Zip != 28735, Zip != 28662, Zip != 28663, Zip != 28749,
Zip != 28702, Zip != 28757,
Zip != 28282, Zip != 28244, Zip != 27110, Zip != 27340, Zip != 28007,
Zip != 28102, Zip != 28089, Zip != 28280, Zip != 27201, Zip != 27556,
Zip != 28109, Zip != 27582, Zip != 27109,
Zip != 28308, Zip != 27531, Zip != 27861, Zip != 27841, Zip != 27881,
Zip != 27916, Zip != 27950, Zip != 27943, Zip != 27978, Zip != 27985,
Zip != 28310, Zip != 28520, Zip != 28524, Zip != 28552, Zip != 28589,
Zip != 28587, Zip != 27927, Zip != 28375, Zip != 28528, Zip != 28533,
Zip != 28537, Zip != 27842, Zip != 27872, Zip != 27964, Zip != 27965,
Zip != 27968, Zip != 28424, Zip != 28577, Zip != 28583, Zip != 27960,
Zip != 28342, Zip != 28543, Zip != 28547, Zip != 28581, Zip != 27926,
Zip != 28553, Zip != 27956) %>%
arrange(Zip) %>%
collect() %>%
mutate(loc = cumsum(c(1,as.numeric(diff(Zip))!=0)),
doy = yday(Date),
year = year(Date),
month = month(Date),
dow = wday(Date)) %>%
rename(Outcome = !!outcome_column,
temp = TAVG) %>%
select(Date, temp, RH, Outcome, Zip, loc, Region, doy, year, month, dow,
if (!is.null(Sex)) paste0("sex"),
if (!is.null(age)) paste0("Age"),
if (!is.null(Race)) paste0("race")) %>%
as.data.table()
if (!is.null(Sex)) {filtered_data <- filtered_data %>%filter(sex == Sex)}
if (!is.null(age)) {filtered_data <- filtered_data %>%filter(Age == age)}
if (!is.null(Race)) {filtered_data <- filtered_data %>%filter(race == Race)}
if (!is.null(region)) {filtered_data <- filtered_data %>%filter(Region == region)}
return(filtered_data)
}
Data <- filter_data(#Sex = "M",        # This can be either M or F
#age = 2,                            # This can be any value between 1 & 4 1 = 0-24, 2 = 25- 46, 3 = 47-65, 4 = 66+
#Race = 3,                           # This can be any value between 1-5
region = "Mountains",                # This can be Mountains, Piedmont, or Coast
outcome_column = "any_outcome"     # This can be Mental_Health, Substance, Schizophrenia, Mood, Anxiety, Behavioral, Personality, Intellectual, Developmental, or Emotional
)
filter_data <- function(Sex = NULL, age = NULL, Race = NULL, Region = NULL, outcome_column = NULL) {
# Generate file name based on input
file_name <- paste0("Preg_Temp_Regions",
if (!is.null(Sex)) paste0("_Sex") else "",
if (!is.null(age)) paste0("_Age") else "",
if (!is.null(Race)) paste0("_Race") else "", ".parquet")
filtered_data <- open_dataset(file_name) %>%
mutate(month = month(Date)) %>%
filter(Zip != 28668, Zip != 28652, Zip != 28629, Zip != 28672, Zip != 28720,
Zip != 28733, Zip != 28735, Zip != 28662, Zip != 28663, Zip != 28749,
Zip != 28702, Zip != 28757,
Zip != 28282, Zip != 28244, Zip != 27110, Zip != 27340, Zip != 28007,
Zip != 28102, Zip != 28089, Zip != 28280, Zip != 27201, Zip != 27556,
Zip != 28109, Zip != 27582, Zip != 27109,
Zip != 28308, Zip != 27531, Zip != 27861, Zip != 27841, Zip != 27881,
Zip != 27916, Zip != 27950, Zip != 27943, Zip != 27978, Zip != 27985,
Zip != 28310, Zip != 28520, Zip != 28524, Zip != 28552, Zip != 28589,
Zip != 28587, Zip != 27927, Zip != 28375, Zip != 28528, Zip != 28533,
Zip != 28537, Zip != 27842, Zip != 27872, Zip != 27964, Zip != 27965,
Zip != 27968, Zip != 28424, Zip != 28577, Zip != 28583, Zip != 27960,
Zip != 28342, Zip != 28543, Zip != 28547, Zip != 28581, Zip != 27926,
Zip != 28553, Zip != 27956) %>%
arrange(Zip) %>%
collect() %>%
mutate(loc = cumsum(c(1,as.numeric(diff(Zip))!=0)),
doy = yday(Date),
year = year(Date),
month = month(Date),
dow = wday(Date)) %>%
rename(Outcome = !!outcome_column,
temp = TAVG) %>%
select(Date, temp, RH, Outcome, Zip, loc, region, doy, year, month, dow,
if (!is.null(Sex)) paste0("sex"),
if (!is.null(age)) paste0("Age"),
if (!is.null(Race)) paste0("race")) %>%
as.data.table()
if (!is.null(Sex)) {filtered_data <- filtered_data %>%filter(sex == Sex)}
if (!is.null(age)) {filtered_data <- filtered_data %>%filter(Age == age)}
if (!is.null(Race)) {filtered_data <- filtered_data %>%filter(race == Race)}
if (!is.null(Region)) {filtered_data <- filtered_data %>%filter(region == Region)}
return(filtered_data)
}
Data <- filter_data(#Sex = "M",        # This can be either M or F
#age = 2,                            # This can be any value between 1 & 4 1 = 0-24, 2 = 25- 46, 3 = 47-65, 4 = 66+
#Race = 3,                           # This can be any value between 1-5
Region = "Mountains",                # This can be Mountains, Piedmont, or Coast
outcome_column = "any_outcome"     # This can be Mental_Health, Substance, Schizophrenia, Mood, Anxiety, Behavioral, Personality, Intellectual, Developmental, or Emotional
)
Data$Outcome <- as.numeric(Data$Outcome)
Data <- Data[complete.cases(Data),]
setwd("~/Maternal_Mental_Health/files")
file.choose()
source("C:\\Users\\owner\\Documents\\Maternal_Mental_Health\\Code\\11.Small_Area_Calculation.R")
# Take a screen shot of each plot run and get it named for what its showing
redpred <- crossreduce(cbtmean, modfull, cen=mean(Data$temp, na.rm=T))
lines <- quantile(Data$temp, c(2.5,50,97.5)/100, na.rm=T)
col <- c("darkgoldenrod3", "aquamarine3")
#Plot the DLNM
plot(cpfull, "overall", ylim=c(0.5,1.5), ylab="RR",
col=col[1], lwd=1.5,
xlab=expression(paste("Temperature ("*degree,"C)")),
ci.arg=list(col=alpha(col[1], 0.2)))
# DEFINE SPLINES OF DAY OF THE YEAR
spldoy <- onebasis(Data$doy, "ns", df=3)
# DEFINE THE CROSS-BASIS FOR TEMPERATURE FROM THE EXPOSURE HISTORY MATRIX
# NB: USE group TO IDENTIFY LACK OF CONTINUITY IN SERIES BY MSOA AND YEAR
range <- round(range(Data$temp, na.rm = T),0)
knots <- range[1] + (range[2]-range[1])/4*1:3
argvar <- list(fun="ns", knots=knots)
arglag <- list(fun="ns", knots=1)
group <- factor(paste(Data$Zip, Data$year, sep="-"))
#table <- data.table(table(group))
cbtmean <- crossbasis(Data$temp, lag=7, argvar=argvar, arglag=arglag,
group=group)
# DEFINE THE STRATA
Data[, stratum:=factor(paste(Zip, year, month, sep=":"))]
# RUN THE MODEL
# NB: EXCLUDE EMPTY STRATA, OTHERWISE BIAS IN gnm WITH quasipoisson
Data[,  keep:=sum(Outcome)>0, by=stratum]
modfull <- gnm(Outcome ~ cbtmean + ns(RH, df = 2) + spldoy:factor(year) + factor(dow),
eliminate=stratum, data=Data, family=quasipoisson, subset=keep)
cpfull <- crosspred(cbtmean, modfull, cen=mean(Data$temp, na.rm=T))
